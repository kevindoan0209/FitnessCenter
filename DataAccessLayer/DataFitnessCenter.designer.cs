#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FitnessCenter")]
	public partial class DataFitnessCenterDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertAccount_Type(Account_Type instance);
    partial void UpdateAccount_Type(Account_Type instance);
    partial void DeleteAccount_Type(Account_Type instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertFitnessCenter(FitnessCenter instance);
    partial void UpdateFitnessCenter(FitnessCenter instance);
    partial void DeleteFitnessCenter(FitnessCenter instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertItems_Type(Items_Type instance);
    partial void UpdateItems_Type(Items_Type instance);
    partial void DeleteItems_Type(Items_Type instance);
    partial void InsertMembership(Membership instance);
    partial void UpdateMembership(Membership instance);
    partial void DeleteMembership(Membership instance);
    partial void InsertPayment(Payment instance);
    partial void UpdatePayment(Payment instance);
    partial void DeletePayment(Payment instance);
    partial void InsertPurchaseDetail(PurchaseDetail instance);
    partial void UpdatePurchaseDetail(PurchaseDetail instance);
    partial void DeletePurchaseDetail(PurchaseDetail instance);
    partial void InsertPurchaseInvoice(PurchaseInvoice instance);
    partial void UpdatePurchaseInvoice(PurchaseInvoice instance);
    partial void DeletePurchaseInvoice(PurchaseInvoice instance);
    partial void InsertSaleDetail(SaleDetail instance);
    partial void UpdateSaleDetail(SaleDetail instance);
    partial void DeleteSaleDetail(SaleDetail instance);
    partial void InsertSaleInvoice(SaleInvoice instance);
    partial void UpdateSaleInvoice(SaleInvoice instance);
    partial void DeleteSaleInvoice(SaleInvoice instance);
    partial void InsertSupplier(Supplier instance);
    partial void UpdateSupplier(Supplier instance);
    partial void DeleteSupplier(Supplier instance);
    #endregion
		
		public DataFitnessCenterDataContext() : 
				base(global::DataAccessLayer.Properties.Settings.Default.FitnessCenterConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataFitnessCenterDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataFitnessCenterDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataFitnessCenterDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataFitnessCenterDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Account_Type> Account_Types
		{
			get
			{
				return this.GetTable<Account_Type>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<FitnessCenter> FitnessCenters
		{
			get
			{
				return this.GetTable<FitnessCenter>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<Items_Type> Items_Types
		{
			get
			{
				return this.GetTable<Items_Type>();
			}
		}
		
		public System.Data.Linq.Table<Membership> Memberships
		{
			get
			{
				return this.GetTable<Membership>();
			}
		}
		
		public System.Data.Linq.Table<Payment> Payments
		{
			get
			{
				return this.GetTable<Payment>();
			}
		}
		
		public System.Data.Linq.Table<PurchaseDetail> PurchaseDetails
		{
			get
			{
				return this.GetTable<PurchaseDetail>();
			}
		}
		
		public System.Data.Linq.Table<PurchaseInvoice> PurchaseInvoices
		{
			get
			{
				return this.GetTable<PurchaseInvoice>();
			}
		}
		
		public System.Data.Linq.Table<SaleDetail> SaleDetails
		{
			get
			{
				return this.GetTable<SaleDetail>();
			}
		}
		
		public System.Data.Linq.Table<SaleInvoice> SaleInvoices
		{
			get
			{
				return this.GetTable<SaleInvoice>();
			}
		}
		
		public System.Data.Linq.Table<Supplier> Suppliers
		{
			get
			{
				return this.GetTable<Supplier>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Account_ID;
		
		private string _Account_Name;
		
		private string _Account_UserName;
		
		private string _Account_Password;
		
		private string _Account_Status;
		
		private System.Data.Linq.Binary _Account_Image;
		
		private int _Account_Type_ID;
		
		private EntitySet<PurchaseInvoice> _PurchaseInvoices;
		
		private EntitySet<SaleInvoice> _SaleInvoices;
		
		private EntityRef<Account_Type> _Account_Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccount_IDChanging(int value);
    partial void OnAccount_IDChanged();
    partial void OnAccount_NameChanging(string value);
    partial void OnAccount_NameChanged();
    partial void OnAccount_UserNameChanging(string value);
    partial void OnAccount_UserNameChanged();
    partial void OnAccount_PasswordChanging(string value);
    partial void OnAccount_PasswordChanged();
    partial void OnAccount_StatusChanging(string value);
    partial void OnAccount_StatusChanged();
    partial void OnAccount_ImageChanging(System.Data.Linq.Binary value);
    partial void OnAccount_ImageChanged();
    partial void OnAccount_Type_IDChanging(int value);
    partial void OnAccount_Type_IDChanged();
    #endregion
		
		public Account()
		{
			this._PurchaseInvoices = new EntitySet<PurchaseInvoice>(new Action<PurchaseInvoice>(this.attach_PurchaseInvoices), new Action<PurchaseInvoice>(this.detach_PurchaseInvoices));
			this._SaleInvoices = new EntitySet<SaleInvoice>(new Action<SaleInvoice>(this.attach_SaleInvoices), new Action<SaleInvoice>(this.detach_SaleInvoices));
			this._Account_Type = default(EntityRef<Account_Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Account_ID
		{
			get
			{
				return this._Account_ID;
			}
			set
			{
				if ((this._Account_ID != value))
				{
					this.OnAccount_IDChanging(value);
					this.SendPropertyChanging();
					this._Account_ID = value;
					this.SendPropertyChanged("Account_ID");
					this.OnAccount_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Name", DbType="NVarChar(100)")]
		public string Account_Name
		{
			get
			{
				return this._Account_Name;
			}
			set
			{
				if ((this._Account_Name != value))
				{
					this.OnAccount_NameChanging(value);
					this.SendPropertyChanging();
					this._Account_Name = value;
					this.SendPropertyChanged("Account_Name");
					this.OnAccount_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_UserName", DbType="NVarChar(50)")]
		public string Account_UserName
		{
			get
			{
				return this._Account_UserName;
			}
			set
			{
				if ((this._Account_UserName != value))
				{
					this.OnAccount_UserNameChanging(value);
					this.SendPropertyChanging();
					this._Account_UserName = value;
					this.SendPropertyChanged("Account_UserName");
					this.OnAccount_UserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Password", DbType="NVarChar(50)")]
		public string Account_Password
		{
			get
			{
				return this._Account_Password;
			}
			set
			{
				if ((this._Account_Password != value))
				{
					this.OnAccount_PasswordChanging(value);
					this.SendPropertyChanging();
					this._Account_Password = value;
					this.SendPropertyChanged("Account_Password");
					this.OnAccount_PasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Status", DbType="NVarChar(50)")]
		public string Account_Status
		{
			get
			{
				return this._Account_Status;
			}
			set
			{
				if ((this._Account_Status != value))
				{
					this.OnAccount_StatusChanging(value);
					this.SendPropertyChanging();
					this._Account_Status = value;
					this.SendPropertyChanged("Account_Status");
					this.OnAccount_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Image", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Account_Image
		{
			get
			{
				return this._Account_Image;
			}
			set
			{
				if ((this._Account_Image != value))
				{
					this.OnAccount_ImageChanging(value);
					this.SendPropertyChanging();
					this._Account_Image = value;
					this.SendPropertyChanged("Account_Image");
					this.OnAccount_ImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Type_ID", DbType="Int NOT NULL")]
		public int Account_Type_ID
		{
			get
			{
				return this._Account_Type_ID;
			}
			set
			{
				if ((this._Account_Type_ID != value))
				{
					if (this._Account_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccount_Type_IDChanging(value);
					this.SendPropertyChanging();
					this._Account_Type_ID = value;
					this.SendPropertyChanged("Account_Type_ID");
					this.OnAccount_Type_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_PurchaseInvoice", Storage="_PurchaseInvoices", ThisKey="Account_ID", OtherKey="Account_ID")]
		public EntitySet<PurchaseInvoice> PurchaseInvoices
		{
			get
			{
				return this._PurchaseInvoices;
			}
			set
			{
				this._PurchaseInvoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_SaleInvoice", Storage="_SaleInvoices", ThisKey="Account_ID", OtherKey="Account_ID")]
		public EntitySet<SaleInvoice> SaleInvoices
		{
			get
			{
				return this._SaleInvoices;
			}
			set
			{
				this._SaleInvoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Type_Account", Storage="_Account_Type", ThisKey="Account_Type_ID", OtherKey="Account_Type_ID", IsForeignKey=true)]
		public Account_Type Account_Type
		{
			get
			{
				return this._Account_Type.Entity;
			}
			set
			{
				Account_Type previousValue = this._Account_Type.Entity;
				if (((previousValue != value) 
							|| (this._Account_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account_Type.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Account_Type.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._Account_Type_ID = value.Account_Type_ID;
					}
					else
					{
						this._Account_Type_ID = default(int);
					}
					this.SendPropertyChanged("Account_Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PurchaseInvoices(PurchaseInvoice entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_PurchaseInvoices(PurchaseInvoice entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_SaleInvoices(SaleInvoice entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_SaleInvoices(SaleInvoice entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account_Type")]
	public partial class Account_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Account_Type_ID;
		
		private string _Account_Type_Authority;
		
		private string _Account_Type_Note;
		
		private EntitySet<Account> _Accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccount_Type_IDChanging(int value);
    partial void OnAccount_Type_IDChanged();
    partial void OnAccount_Type_AuthorityChanging(string value);
    partial void OnAccount_Type_AuthorityChanged();
    partial void OnAccount_Type_NoteChanging(string value);
    partial void OnAccount_Type_NoteChanged();
    #endregion
		
		public Account_Type()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Type_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Account_Type_ID
		{
			get
			{
				return this._Account_Type_ID;
			}
			set
			{
				if ((this._Account_Type_ID != value))
				{
					this.OnAccount_Type_IDChanging(value);
					this.SendPropertyChanging();
					this._Account_Type_ID = value;
					this.SendPropertyChanged("Account_Type_ID");
					this.OnAccount_Type_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Type_Authority", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Account_Type_Authority
		{
			get
			{
				return this._Account_Type_Authority;
			}
			set
			{
				if ((this._Account_Type_Authority != value))
				{
					this.OnAccount_Type_AuthorityChanging(value);
					this.SendPropertyChanging();
					this._Account_Type_Authority = value;
					this.SendPropertyChanged("Account_Type_Authority");
					this.OnAccount_Type_AuthorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Type_Note", DbType="NVarChar(500)")]
		public string Account_Type_Note
		{
			get
			{
				return this._Account_Type_Note;
			}
			set
			{
				if ((this._Account_Type_Note != value))
				{
					this.OnAccount_Type_NoteChanging(value);
					this.SendPropertyChanging();
					this._Account_Type_Note = value;
					this.SendPropertyChanged("Account_Type_Note");
					this.OnAccount_Type_NoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Type_Account", Storage="_Accounts", ThisKey="Account_Type_ID", OtherKey="Account_Type_ID")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Account_Type = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Account_Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Customer_ID;
		
		private string _Customer_Name;
		
		private System.Data.Linq.Binary _Customer_Image;
		
		private System.Nullable<System.DateTime> _Customer_Age;
		
		private string _Customer_Sex;
		
		private string _Customer_Email;
		
		private string _Customer_Phone;
		
		private string _Customer_Job;
		
		private string _Customer_Address;
		
		private int _Membership_ID;
		
		private System.DateTime _Customer_StartDate;
		
		private System.DateTime _Customer_EndDate;
		
		private string _Customer_Note;
		
		private EntitySet<Payment> _Payments;
		
		private EntitySet<SaleInvoice> _SaleInvoices;
		
		private EntityRef<Membership> _Membership;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomer_IDChanging(int value);
    partial void OnCustomer_IDChanged();
    partial void OnCustomer_NameChanging(string value);
    partial void OnCustomer_NameChanged();
    partial void OnCustomer_ImageChanging(System.Data.Linq.Binary value);
    partial void OnCustomer_ImageChanged();
    partial void OnCustomer_AgeChanging(System.Nullable<System.DateTime> value);
    partial void OnCustomer_AgeChanged();
    partial void OnCustomer_SexChanging(string value);
    partial void OnCustomer_SexChanged();
    partial void OnCustomer_EmailChanging(string value);
    partial void OnCustomer_EmailChanged();
    partial void OnCustomer_PhoneChanging(string value);
    partial void OnCustomer_PhoneChanged();
    partial void OnCustomer_JobChanging(string value);
    partial void OnCustomer_JobChanged();
    partial void OnCustomer_AddressChanging(string value);
    partial void OnCustomer_AddressChanged();
    partial void OnMembership_IDChanging(int value);
    partial void OnMembership_IDChanged();
    partial void OnCustomer_StartDateChanging(System.DateTime value);
    partial void OnCustomer_StartDateChanged();
    partial void OnCustomer_EndDateChanging(System.DateTime value);
    partial void OnCustomer_EndDateChanged();
    partial void OnCustomer_NoteChanging(string value);
    partial void OnCustomer_NoteChanged();
    #endregion
		
		public Customer()
		{
			this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
			this._SaleInvoices = new EntitySet<SaleInvoice>(new Action<SaleInvoice>(this.attach_SaleInvoices), new Action<SaleInvoice>(this.detach_SaleInvoices));
			this._Membership = default(EntityRef<Membership>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Customer_ID
		{
			get
			{
				return this._Customer_ID;
			}
			set
			{
				if ((this._Customer_ID != value))
				{
					this.OnCustomer_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_ID = value;
					this.SendPropertyChanged("Customer_ID");
					this.OnCustomer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Customer_Name
		{
			get
			{
				return this._Customer_Name;
			}
			set
			{
				if ((this._Customer_Name != value))
				{
					this.OnCustomer_NameChanging(value);
					this.SendPropertyChanging();
					this._Customer_Name = value;
					this.SendPropertyChanged("Customer_Name");
					this.OnCustomer_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Image", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Customer_Image
		{
			get
			{
				return this._Customer_Image;
			}
			set
			{
				if ((this._Customer_Image != value))
				{
					this.OnCustomer_ImageChanging(value);
					this.SendPropertyChanging();
					this._Customer_Image = value;
					this.SendPropertyChanged("Customer_Image");
					this.OnCustomer_ImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Age", DbType="Date")]
		public System.Nullable<System.DateTime> Customer_Age
		{
			get
			{
				return this._Customer_Age;
			}
			set
			{
				if ((this._Customer_Age != value))
				{
					this.OnCustomer_AgeChanging(value);
					this.SendPropertyChanging();
					this._Customer_Age = value;
					this.SendPropertyChanged("Customer_Age");
					this.OnCustomer_AgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Sex", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Customer_Sex
		{
			get
			{
				return this._Customer_Sex;
			}
			set
			{
				if ((this._Customer_Sex != value))
				{
					this.OnCustomer_SexChanging(value);
					this.SendPropertyChanging();
					this._Customer_Sex = value;
					this.SendPropertyChanged("Customer_Sex");
					this.OnCustomer_SexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Email", DbType="NVarChar(100)")]
		public string Customer_Email
		{
			get
			{
				return this._Customer_Email;
			}
			set
			{
				if ((this._Customer_Email != value))
				{
					this.OnCustomer_EmailChanging(value);
					this.SendPropertyChanging();
					this._Customer_Email = value;
					this.SendPropertyChanged("Customer_Email");
					this.OnCustomer_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Phone", DbType="NVarChar(100)")]
		public string Customer_Phone
		{
			get
			{
				return this._Customer_Phone;
			}
			set
			{
				if ((this._Customer_Phone != value))
				{
					this.OnCustomer_PhoneChanging(value);
					this.SendPropertyChanging();
					this._Customer_Phone = value;
					this.SendPropertyChanged("Customer_Phone");
					this.OnCustomer_PhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Job", DbType="NVarChar(500)")]
		public string Customer_Job
		{
			get
			{
				return this._Customer_Job;
			}
			set
			{
				if ((this._Customer_Job != value))
				{
					this.OnCustomer_JobChanging(value);
					this.SendPropertyChanging();
					this._Customer_Job = value;
					this.SendPropertyChanged("Customer_Job");
					this.OnCustomer_JobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Address", DbType="NVarChar(500)")]
		public string Customer_Address
		{
			get
			{
				return this._Customer_Address;
			}
			set
			{
				if ((this._Customer_Address != value))
				{
					this.OnCustomer_AddressChanging(value);
					this.SendPropertyChanging();
					this._Customer_Address = value;
					this.SendPropertyChanged("Customer_Address");
					this.OnCustomer_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Membership_ID", DbType="Int NOT NULL")]
		public int Membership_ID
		{
			get
			{
				return this._Membership_ID;
			}
			set
			{
				if ((this._Membership_ID != value))
				{
					if (this._Membership.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMembership_IDChanging(value);
					this.SendPropertyChanging();
					this._Membership_ID = value;
					this.SendPropertyChanged("Membership_ID");
					this.OnMembership_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_StartDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Customer_StartDate
		{
			get
			{
				return this._Customer_StartDate;
			}
			set
			{
				if ((this._Customer_StartDate != value))
				{
					this.OnCustomer_StartDateChanging(value);
					this.SendPropertyChanging();
					this._Customer_StartDate = value;
					this.SendPropertyChanged("Customer_StartDate");
					this.OnCustomer_StartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_EndDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Customer_EndDate
		{
			get
			{
				return this._Customer_EndDate;
			}
			set
			{
				if ((this._Customer_EndDate != value))
				{
					this.OnCustomer_EndDateChanging(value);
					this.SendPropertyChanging();
					this._Customer_EndDate = value;
					this.SendPropertyChanged("Customer_EndDate");
					this.OnCustomer_EndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Note", DbType="NVarChar(500)")]
		public string Customer_Note
		{
			get
			{
				return this._Customer_Note;
			}
			set
			{
				if ((this._Customer_Note != value))
				{
					this.OnCustomer_NoteChanging(value);
					this.SendPropertyChanging();
					this._Customer_Note = value;
					this.SendPropertyChanged("Customer_Note");
					this.OnCustomer_NoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Payment", Storage="_Payments", ThisKey="Customer_ID", OtherKey="Customer_ID")]
		public EntitySet<Payment> Payments
		{
			get
			{
				return this._Payments;
			}
			set
			{
				this._Payments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_SaleInvoice", Storage="_SaleInvoices", ThisKey="Customer_ID", OtherKey="Customer_ID")]
		public EntitySet<SaleInvoice> SaleInvoices
		{
			get
			{
				return this._SaleInvoices;
			}
			set
			{
				this._SaleInvoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Membership_Customer", Storage="_Membership", ThisKey="Membership_ID", OtherKey="Membership_ID", IsForeignKey=true)]
		public Membership Membership
		{
			get
			{
				return this._Membership.Entity;
			}
			set
			{
				Membership previousValue = this._Membership.Entity;
				if (((previousValue != value) 
							|| (this._Membership.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Membership.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._Membership.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._Membership_ID = value.Membership_ID;
					}
					else
					{
						this._Membership_ID = default(int);
					}
					this.SendPropertyChanged("Membership");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_SaleInvoices(SaleInvoice entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_SaleInvoices(SaleInvoice entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FitnessCenter")]
	public partial class FitnessCenter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FitnessCenter_ID;
		
		private string _FitnessCenter_Name;
		
		private string _FitnessCenter_Tel;
		
		private string _FitnessCenter_Email;
		
		private string _FitnessCenter_Facebook;
		
		private string _FitnessCenter_Address;
		
		private string _FitnessCenter_Link;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFitnessCenter_IDChanging(int value);
    partial void OnFitnessCenter_IDChanged();
    partial void OnFitnessCenter_NameChanging(string value);
    partial void OnFitnessCenter_NameChanged();
    partial void OnFitnessCenter_TelChanging(string value);
    partial void OnFitnessCenter_TelChanged();
    partial void OnFitnessCenter_EmailChanging(string value);
    partial void OnFitnessCenter_EmailChanged();
    partial void OnFitnessCenter_FacebookChanging(string value);
    partial void OnFitnessCenter_FacebookChanged();
    partial void OnFitnessCenter_AddressChanging(string value);
    partial void OnFitnessCenter_AddressChanged();
    partial void OnFitnessCenter_LinkChanging(string value);
    partial void OnFitnessCenter_LinkChanged();
    #endregion
		
		public FitnessCenter()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FitnessCenter_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FitnessCenter_ID
		{
			get
			{
				return this._FitnessCenter_ID;
			}
			set
			{
				if ((this._FitnessCenter_ID != value))
				{
					this.OnFitnessCenter_IDChanging(value);
					this.SendPropertyChanging();
					this._FitnessCenter_ID = value;
					this.SendPropertyChanged("FitnessCenter_ID");
					this.OnFitnessCenter_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FitnessCenter_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string FitnessCenter_Name
		{
			get
			{
				return this._FitnessCenter_Name;
			}
			set
			{
				if ((this._FitnessCenter_Name != value))
				{
					this.OnFitnessCenter_NameChanging(value);
					this.SendPropertyChanging();
					this._FitnessCenter_Name = value;
					this.SendPropertyChanged("FitnessCenter_Name");
					this.OnFitnessCenter_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FitnessCenter_Tel", DbType="NVarChar(50)")]
		public string FitnessCenter_Tel
		{
			get
			{
				return this._FitnessCenter_Tel;
			}
			set
			{
				if ((this._FitnessCenter_Tel != value))
				{
					this.OnFitnessCenter_TelChanging(value);
					this.SendPropertyChanging();
					this._FitnessCenter_Tel = value;
					this.SendPropertyChanged("FitnessCenter_Tel");
					this.OnFitnessCenter_TelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FitnessCenter_Email", DbType="NVarChar(500)")]
		public string FitnessCenter_Email
		{
			get
			{
				return this._FitnessCenter_Email;
			}
			set
			{
				if ((this._FitnessCenter_Email != value))
				{
					this.OnFitnessCenter_EmailChanging(value);
					this.SendPropertyChanging();
					this._FitnessCenter_Email = value;
					this.SendPropertyChanged("FitnessCenter_Email");
					this.OnFitnessCenter_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FitnessCenter_Facebook", DbType="NVarChar(500)")]
		public string FitnessCenter_Facebook
		{
			get
			{
				return this._FitnessCenter_Facebook;
			}
			set
			{
				if ((this._FitnessCenter_Facebook != value))
				{
					this.OnFitnessCenter_FacebookChanging(value);
					this.SendPropertyChanging();
					this._FitnessCenter_Facebook = value;
					this.SendPropertyChanged("FitnessCenter_Facebook");
					this.OnFitnessCenter_FacebookChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FitnessCenter_Address", DbType="NVarChar(500)")]
		public string FitnessCenter_Address
		{
			get
			{
				return this._FitnessCenter_Address;
			}
			set
			{
				if ((this._FitnessCenter_Address != value))
				{
					this.OnFitnessCenter_AddressChanging(value);
					this.SendPropertyChanging();
					this._FitnessCenter_Address = value;
					this.SendPropertyChanged("FitnessCenter_Address");
					this.OnFitnessCenter_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FitnessCenter_Link", DbType="NVarChar(500)")]
		public string FitnessCenter_Link
		{
			get
			{
				return this._FitnessCenter_Link;
			}
			set
			{
				if ((this._FitnessCenter_Link != value))
				{
					this.OnFitnessCenter_LinkChanging(value);
					this.SendPropertyChanging();
					this._FitnessCenter_Link = value;
					this.SendPropertyChanged("FitnessCenter_Link");
					this.OnFitnessCenter_LinkChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Items")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Items_ID;
		
		private int _Items_Type_ID;
		
		private string _Items_Name;
		
		private System.Data.Linq.Binary _Items_Images;
		
		private string _Items_Details;
		
		private int _Items_Price;
		
		private string _Items_Company;
		
		private string _Items_Status;
		
		private string _Items_Note;
		
		private EntitySet<PurchaseDetail> _PurchaseDetails;
		
		private EntitySet<SaleDetail> _SaleDetails;
		
		private EntityRef<Items_Type> _Items_Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItems_IDChanging(int value);
    partial void OnItems_IDChanged();
    partial void OnItems_Type_IDChanging(int value);
    partial void OnItems_Type_IDChanged();
    partial void OnItems_NameChanging(string value);
    partial void OnItems_NameChanged();
    partial void OnItems_ImagesChanging(System.Data.Linq.Binary value);
    partial void OnItems_ImagesChanged();
    partial void OnItems_DetailsChanging(string value);
    partial void OnItems_DetailsChanged();
    partial void OnItems_PriceChanging(int value);
    partial void OnItems_PriceChanged();
    partial void OnItems_CompanyChanging(string value);
    partial void OnItems_CompanyChanged();
    partial void OnItems_StatusChanging(string value);
    partial void OnItems_StatusChanged();
    partial void OnItems_NoteChanging(string value);
    partial void OnItems_NoteChanged();
    #endregion
		
		public Item()
		{
			this._PurchaseDetails = new EntitySet<PurchaseDetail>(new Action<PurchaseDetail>(this.attach_PurchaseDetails), new Action<PurchaseDetail>(this.detach_PurchaseDetails));
			this._SaleDetails = new EntitySet<SaleDetail>(new Action<SaleDetail>(this.attach_SaleDetails), new Action<SaleDetail>(this.detach_SaleDetails));
			this._Items_Type = default(EntityRef<Items_Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Items_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Items_ID
		{
			get
			{
				return this._Items_ID;
			}
			set
			{
				if ((this._Items_ID != value))
				{
					this.OnItems_IDChanging(value);
					this.SendPropertyChanging();
					this._Items_ID = value;
					this.SendPropertyChanged("Items_ID");
					this.OnItems_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Items_Type_ID", DbType="Int NOT NULL")]
		public int Items_Type_ID
		{
			get
			{
				return this._Items_Type_ID;
			}
			set
			{
				if ((this._Items_Type_ID != value))
				{
					if (this._Items_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItems_Type_IDChanging(value);
					this.SendPropertyChanging();
					this._Items_Type_ID = value;
					this.SendPropertyChanged("Items_Type_ID");
					this.OnItems_Type_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Items_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Items_Name
		{
			get
			{
				return this._Items_Name;
			}
			set
			{
				if ((this._Items_Name != value))
				{
					this.OnItems_NameChanging(value);
					this.SendPropertyChanging();
					this._Items_Name = value;
					this.SendPropertyChanged("Items_Name");
					this.OnItems_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Items_Images", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Items_Images
		{
			get
			{
				return this._Items_Images;
			}
			set
			{
				if ((this._Items_Images != value))
				{
					this.OnItems_ImagesChanging(value);
					this.SendPropertyChanging();
					this._Items_Images = value;
					this.SendPropertyChanged("Items_Images");
					this.OnItems_ImagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Items_Details", DbType="NVarChar(500)")]
		public string Items_Details
		{
			get
			{
				return this._Items_Details;
			}
			set
			{
				if ((this._Items_Details != value))
				{
					this.OnItems_DetailsChanging(value);
					this.SendPropertyChanging();
					this._Items_Details = value;
					this.SendPropertyChanged("Items_Details");
					this.OnItems_DetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Items_Price", DbType="Int NOT NULL")]
		public int Items_Price
		{
			get
			{
				return this._Items_Price;
			}
			set
			{
				if ((this._Items_Price != value))
				{
					this.OnItems_PriceChanging(value);
					this.SendPropertyChanging();
					this._Items_Price = value;
					this.SendPropertyChanged("Items_Price");
					this.OnItems_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Items_Company", DbType="NVarChar(500)")]
		public string Items_Company
		{
			get
			{
				return this._Items_Company;
			}
			set
			{
				if ((this._Items_Company != value))
				{
					this.OnItems_CompanyChanging(value);
					this.SendPropertyChanging();
					this._Items_Company = value;
					this.SendPropertyChanged("Items_Company");
					this.OnItems_CompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Items_Status", DbType="NVarChar(500)")]
		public string Items_Status
		{
			get
			{
				return this._Items_Status;
			}
			set
			{
				if ((this._Items_Status != value))
				{
					this.OnItems_StatusChanging(value);
					this.SendPropertyChanging();
					this._Items_Status = value;
					this.SendPropertyChanged("Items_Status");
					this.OnItems_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Items_Note", DbType="NVarChar(500)")]
		public string Items_Note
		{
			get
			{
				return this._Items_Note;
			}
			set
			{
				if ((this._Items_Note != value))
				{
					this.OnItems_NoteChanging(value);
					this.SendPropertyChanging();
					this._Items_Note = value;
					this.SendPropertyChanged("Items_Note");
					this.OnItems_NoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_PurchaseDetail", Storage="_PurchaseDetails", ThisKey="Items_ID", OtherKey="Items_ID")]
		public EntitySet<PurchaseDetail> PurchaseDetails
		{
			get
			{
				return this._PurchaseDetails;
			}
			set
			{
				this._PurchaseDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_SaleDetail", Storage="_SaleDetails", ThisKey="Items_ID", OtherKey="Items_ID")]
		public EntitySet<SaleDetail> SaleDetails
		{
			get
			{
				return this._SaleDetails;
			}
			set
			{
				this._SaleDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Items_Type_Item", Storage="_Items_Type", ThisKey="Items_Type_ID", OtherKey="Items_Type_ID", IsForeignKey=true)]
		public Items_Type Items_Type
		{
			get
			{
				return this._Items_Type.Entity;
			}
			set
			{
				Items_Type previousValue = this._Items_Type.Entity;
				if (((previousValue != value) 
							|| (this._Items_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Items_Type.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Items_Type.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._Items_Type_ID = value.Items_Type_ID;
					}
					else
					{
						this._Items_Type_ID = default(int);
					}
					this.SendPropertyChanged("Items_Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PurchaseDetails(PurchaseDetail entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_PurchaseDetails(PurchaseDetail entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_SaleDetails(SaleDetail entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_SaleDetails(SaleDetail entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Items_Type")]
	public partial class Items_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Items_Type_ID;
		
		private string _Items_Type_Name;
		
		private string _Items_Type_Note;
		
		private EntitySet<Item> _Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItems_Type_IDChanging(int value);
    partial void OnItems_Type_IDChanged();
    partial void OnItems_Type_NameChanging(string value);
    partial void OnItems_Type_NameChanged();
    partial void OnItems_Type_NoteChanging(string value);
    partial void OnItems_Type_NoteChanged();
    #endregion
		
		public Items_Type()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Items_Type_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Items_Type_ID
		{
			get
			{
				return this._Items_Type_ID;
			}
			set
			{
				if ((this._Items_Type_ID != value))
				{
					this.OnItems_Type_IDChanging(value);
					this.SendPropertyChanging();
					this._Items_Type_ID = value;
					this.SendPropertyChanged("Items_Type_ID");
					this.OnItems_Type_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Items_Type_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Items_Type_Name
		{
			get
			{
				return this._Items_Type_Name;
			}
			set
			{
				if ((this._Items_Type_Name != value))
				{
					this.OnItems_Type_NameChanging(value);
					this.SendPropertyChanging();
					this._Items_Type_Name = value;
					this.SendPropertyChanged("Items_Type_Name");
					this.OnItems_Type_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Items_Type_Note", DbType="NVarChar(500)")]
		public string Items_Type_Note
		{
			get
			{
				return this._Items_Type_Note;
			}
			set
			{
				if ((this._Items_Type_Note != value))
				{
					this.OnItems_Type_NoteChanging(value);
					this.SendPropertyChanging();
					this._Items_Type_Note = value;
					this.SendPropertyChanged("Items_Type_Note");
					this.OnItems_Type_NoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Items_Type_Item", Storage="_Items", ThisKey="Items_Type_ID", OtherKey="Items_Type_ID")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Items_Type = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Items_Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Membership")]
	public partial class Membership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Membership_ID;
		
		private string _Membership_Name;
		
		private int _Membership_Price;
		
		private string _Membership_Note;
		
		private EntitySet<Customer> _Customers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMembership_IDChanging(int value);
    partial void OnMembership_IDChanged();
    partial void OnMembership_NameChanging(string value);
    partial void OnMembership_NameChanged();
    partial void OnMembership_PriceChanging(int value);
    partial void OnMembership_PriceChanged();
    partial void OnMembership_NoteChanging(string value);
    partial void OnMembership_NoteChanged();
    #endregion
		
		public Membership()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Membership_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Membership_ID
		{
			get
			{
				return this._Membership_ID;
			}
			set
			{
				if ((this._Membership_ID != value))
				{
					this.OnMembership_IDChanging(value);
					this.SendPropertyChanging();
					this._Membership_ID = value;
					this.SendPropertyChanged("Membership_ID");
					this.OnMembership_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Membership_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Membership_Name
		{
			get
			{
				return this._Membership_Name;
			}
			set
			{
				if ((this._Membership_Name != value))
				{
					this.OnMembership_NameChanging(value);
					this.SendPropertyChanging();
					this._Membership_Name = value;
					this.SendPropertyChanged("Membership_Name");
					this.OnMembership_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Membership_Price", DbType="Int NOT NULL")]
		public int Membership_Price
		{
			get
			{
				return this._Membership_Price;
			}
			set
			{
				if ((this._Membership_Price != value))
				{
					this.OnMembership_PriceChanging(value);
					this.SendPropertyChanging();
					this._Membership_Price = value;
					this.SendPropertyChanged("Membership_Price");
					this.OnMembership_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Membership_Note", DbType="NChar(10)")]
		public string Membership_Note
		{
			get
			{
				return this._Membership_Note;
			}
			set
			{
				if ((this._Membership_Note != value))
				{
					this.OnMembership_NoteChanging(value);
					this.SendPropertyChanging();
					this._Membership_Note = value;
					this.SendPropertyChanged("Membership_Note");
					this.OnMembership_NoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Membership_Customer", Storage="_Customers", ThisKey="Membership_ID", OtherKey="Membership_ID")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Membership = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Membership = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payment")]
	public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Payment_ID;
		
		private int _Customer_ID;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private int _TotalAmount;
		
		private System.Nullable<int> _Payment_Note;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPayment_IDChanging(int value);
    partial void OnPayment_IDChanged();
    partial void OnCustomer_IDChanging(int value);
    partial void OnCustomer_IDChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnTotalAmountChanging(int value);
    partial void OnTotalAmountChanged();
    partial void OnPayment_NoteChanging(System.Nullable<int> value);
    partial void OnPayment_NoteChanged();
    #endregion
		
		public Payment()
		{
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Payment_ID
		{
			get
			{
				return this._Payment_ID;
			}
			set
			{
				if ((this._Payment_ID != value))
				{
					this.OnPayment_IDChanging(value);
					this.SendPropertyChanging();
					this._Payment_ID = value;
					this.SendPropertyChanged("Payment_ID");
					this.OnPayment_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_ID", DbType="Int NOT NULL")]
		public int Customer_ID
		{
			get
			{
				return this._Customer_ID;
			}
			set
			{
				if ((this._Customer_ID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_ID = value;
					this.SendPropertyChanged("Customer_ID");
					this.OnCustomer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAmount", DbType="Int NOT NULL")]
		public int TotalAmount
		{
			get
			{
				return this._TotalAmount;
			}
			set
			{
				if ((this._TotalAmount != value))
				{
					this.OnTotalAmountChanging(value);
					this.SendPropertyChanging();
					this._TotalAmount = value;
					this.SendPropertyChanged("TotalAmount");
					this.OnTotalAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment_Note", DbType="Int")]
		public System.Nullable<int> Payment_Note
		{
			get
			{
				return this._Payment_Note;
			}
			set
			{
				if ((this._Payment_Note != value))
				{
					this.OnPayment_NoteChanging(value);
					this.SendPropertyChanging();
					this._Payment_Note = value;
					this.SendPropertyChanged("Payment_Note");
					this.OnPayment_NoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Payment", Storage="_Customer", ThisKey="Customer_ID", OtherKey="Customer_ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Payments.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Payments.Add(this);
						this._Customer_ID = value.Customer_ID;
					}
					else
					{
						this._Customer_ID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PurchaseDetail")]
	public partial class PurchaseDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PurchaseInvoice_ID;
		
		private int _Items_ID;
		
		private int _Quanity;
		
		private int _Price;
		
		private string _Note;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<PurchaseInvoice> _PurchaseInvoice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPurchaseInvoice_IDChanging(int value);
    partial void OnPurchaseInvoice_IDChanged();
    partial void OnItems_IDChanging(int value);
    partial void OnItems_IDChanged();
    partial void OnQuanityChanging(int value);
    partial void OnQuanityChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public PurchaseDetail()
		{
			this._Item = default(EntityRef<Item>);
			this._PurchaseInvoice = default(EntityRef<PurchaseInvoice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseInvoice_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PurchaseInvoice_ID
		{
			get
			{
				return this._PurchaseInvoice_ID;
			}
			set
			{
				if ((this._PurchaseInvoice_ID != value))
				{
					if (this._PurchaseInvoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPurchaseInvoice_IDChanging(value);
					this.SendPropertyChanging();
					this._PurchaseInvoice_ID = value;
					this.SendPropertyChanged("PurchaseInvoice_ID");
					this.OnPurchaseInvoice_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Items_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Items_ID
		{
			get
			{
				return this._Items_ID;
			}
			set
			{
				if ((this._Items_ID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItems_IDChanging(value);
					this.SendPropertyChanging();
					this._Items_ID = value;
					this.SendPropertyChanged("Items_ID");
					this.OnItems_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quanity", DbType="Int NOT NULL")]
		public int Quanity
		{
			get
			{
				return this._Quanity;
			}
			set
			{
				if ((this._Quanity != value))
				{
					this.OnQuanityChanging(value);
					this.SendPropertyChanging();
					this._Quanity = value;
					this.SendPropertyChanged("Quanity");
					this.OnQuanityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(500)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_PurchaseDetail", Storage="_Item", ThisKey="Items_ID", OtherKey="Items_ID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.PurchaseDetails.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.PurchaseDetails.Add(this);
						this._Items_ID = value.Items_ID;
					}
					else
					{
						this._Items_ID = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PurchaseInvoice_PurchaseDetail", Storage="_PurchaseInvoice", ThisKey="PurchaseInvoice_ID", OtherKey="PurchaseInvoice_ID", IsForeignKey=true)]
		public PurchaseInvoice PurchaseInvoice
		{
			get
			{
				return this._PurchaseInvoice.Entity;
			}
			set
			{
				PurchaseInvoice previousValue = this._PurchaseInvoice.Entity;
				if (((previousValue != value) 
							|| (this._PurchaseInvoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PurchaseInvoice.Entity = null;
						previousValue.PurchaseDetails.Remove(this);
					}
					this._PurchaseInvoice.Entity = value;
					if ((value != null))
					{
						value.PurchaseDetails.Add(this);
						this._PurchaseInvoice_ID = value.PurchaseInvoice_ID;
					}
					else
					{
						this._PurchaseInvoice_ID = default(int);
					}
					this.SendPropertyChanged("PurchaseInvoice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PurchaseInvoice")]
	public partial class PurchaseInvoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PurchaseInvoice_ID;
		
		private System.DateTime _PurchaseInvoice_Date;
		
		private string _PurchaseInvoice_Note;
		
		private int _Supplier_ID;
		
		private int _Account_ID;
		
		private EntitySet<PurchaseDetail> _PurchaseDetails;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Supplier> _Supplier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPurchaseInvoice_IDChanging(int value);
    partial void OnPurchaseInvoice_IDChanged();
    partial void OnPurchaseInvoice_DateChanging(System.DateTime value);
    partial void OnPurchaseInvoice_DateChanged();
    partial void OnPurchaseInvoice_NoteChanging(string value);
    partial void OnPurchaseInvoice_NoteChanged();
    partial void OnSupplier_IDChanging(int value);
    partial void OnSupplier_IDChanged();
    partial void OnAccount_IDChanging(int value);
    partial void OnAccount_IDChanged();
    #endregion
		
		public PurchaseInvoice()
		{
			this._PurchaseDetails = new EntitySet<PurchaseDetail>(new Action<PurchaseDetail>(this.attach_PurchaseDetails), new Action<PurchaseDetail>(this.detach_PurchaseDetails));
			this._Account = default(EntityRef<Account>);
			this._Supplier = default(EntityRef<Supplier>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseInvoice_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PurchaseInvoice_ID
		{
			get
			{
				return this._PurchaseInvoice_ID;
			}
			set
			{
				if ((this._PurchaseInvoice_ID != value))
				{
					this.OnPurchaseInvoice_IDChanging(value);
					this.SendPropertyChanging();
					this._PurchaseInvoice_ID = value;
					this.SendPropertyChanged("PurchaseInvoice_ID");
					this.OnPurchaseInvoice_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseInvoice_Date", DbType="SmallDateTime NOT NULL")]
		public System.DateTime PurchaseInvoice_Date
		{
			get
			{
				return this._PurchaseInvoice_Date;
			}
			set
			{
				if ((this._PurchaseInvoice_Date != value))
				{
					this.OnPurchaseInvoice_DateChanging(value);
					this.SendPropertyChanging();
					this._PurchaseInvoice_Date = value;
					this.SendPropertyChanged("PurchaseInvoice_Date");
					this.OnPurchaseInvoice_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseInvoice_Note", DbType="NVarChar(500)")]
		public string PurchaseInvoice_Note
		{
			get
			{
				return this._PurchaseInvoice_Note;
			}
			set
			{
				if ((this._PurchaseInvoice_Note != value))
				{
					this.OnPurchaseInvoice_NoteChanging(value);
					this.SendPropertyChanging();
					this._PurchaseInvoice_Note = value;
					this.SendPropertyChanged("PurchaseInvoice_Note");
					this.OnPurchaseInvoice_NoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supplier_ID", DbType="Int NOT NULL")]
		public int Supplier_ID
		{
			get
			{
				return this._Supplier_ID;
			}
			set
			{
				if ((this._Supplier_ID != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplier_IDChanging(value);
					this.SendPropertyChanging();
					this._Supplier_ID = value;
					this.SendPropertyChanged("Supplier_ID");
					this.OnSupplier_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_ID", DbType="Int NOT NULL")]
		public int Account_ID
		{
			get
			{
				return this._Account_ID;
			}
			set
			{
				if ((this._Account_ID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccount_IDChanging(value);
					this.SendPropertyChanging();
					this._Account_ID = value;
					this.SendPropertyChanged("Account_ID");
					this.OnAccount_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PurchaseInvoice_PurchaseDetail", Storage="_PurchaseDetails", ThisKey="PurchaseInvoice_ID", OtherKey="PurchaseInvoice_ID")]
		public EntitySet<PurchaseDetail> PurchaseDetails
		{
			get
			{
				return this._PurchaseDetails;
			}
			set
			{
				this._PurchaseDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_PurchaseInvoice", Storage="_Account", ThisKey="Account_ID", OtherKey="Account_ID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.PurchaseInvoices.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.PurchaseInvoices.Add(this);
						this._Account_ID = value.Account_ID;
					}
					else
					{
						this._Account_ID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_PurchaseInvoice", Storage="_Supplier", ThisKey="Supplier_ID", OtherKey="Supplier_ID", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.PurchaseInvoices.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.PurchaseInvoices.Add(this);
						this._Supplier_ID = value.Supplier_ID;
					}
					else
					{
						this._Supplier_ID = default(int);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PurchaseDetails(PurchaseDetail entity)
		{
			this.SendPropertyChanging();
			entity.PurchaseInvoice = this;
		}
		
		private void detach_PurchaseDetails(PurchaseDetail entity)
		{
			this.SendPropertyChanging();
			entity.PurchaseInvoice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SaleDetail")]
	public partial class SaleDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SaleInvoice_ID;
		
		private int _Items_ID;
		
		private int _Quantity;
		
		private string _Note;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<SaleInvoice> _SaleInvoice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSaleInvoice_IDChanging(int value);
    partial void OnSaleInvoice_IDChanged();
    partial void OnItems_IDChanging(int value);
    partial void OnItems_IDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public SaleDetail()
		{
			this._Item = default(EntityRef<Item>);
			this._SaleInvoice = default(EntityRef<SaleInvoice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleInvoice_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SaleInvoice_ID
		{
			get
			{
				return this._SaleInvoice_ID;
			}
			set
			{
				if ((this._SaleInvoice_ID != value))
				{
					if (this._SaleInvoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSaleInvoice_IDChanging(value);
					this.SendPropertyChanging();
					this._SaleInvoice_ID = value;
					this.SendPropertyChanged("SaleInvoice_ID");
					this.OnSaleInvoice_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Items_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Items_ID
		{
			get
			{
				return this._Items_ID;
			}
			set
			{
				if ((this._Items_ID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItems_IDChanging(value);
					this.SendPropertyChanging();
					this._Items_ID = value;
					this.SendPropertyChanged("Items_ID");
					this.OnItems_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(500)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_SaleDetail", Storage="_Item", ThisKey="Items_ID", OtherKey="Items_ID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.SaleDetails.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.SaleDetails.Add(this);
						this._Items_ID = value.Items_ID;
					}
					else
					{
						this._Items_ID = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SaleInvoice_SaleDetail", Storage="_SaleInvoice", ThisKey="SaleInvoice_ID", OtherKey="SaleInvoice_ID", IsForeignKey=true)]
		public SaleInvoice SaleInvoice
		{
			get
			{
				return this._SaleInvoice.Entity;
			}
			set
			{
				SaleInvoice previousValue = this._SaleInvoice.Entity;
				if (((previousValue != value) 
							|| (this._SaleInvoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SaleInvoice.Entity = null;
						previousValue.SaleDetails.Remove(this);
					}
					this._SaleInvoice.Entity = value;
					if ((value != null))
					{
						value.SaleDetails.Add(this);
						this._SaleInvoice_ID = value.SaleInvoice_ID;
					}
					else
					{
						this._SaleInvoice_ID = default(int);
					}
					this.SendPropertyChanged("SaleInvoice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SaleInvoice")]
	public partial class SaleInvoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SaleInvoice_ID;
		
		private System.DateTime _SaleInvoice_Date;
		
		private string _SaleInvoice_Note;
		
		private int _Account_ID;
		
		private int _Customer_ID;
		
		private EntitySet<SaleDetail> _SaleDetails;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSaleInvoice_IDChanging(int value);
    partial void OnSaleInvoice_IDChanged();
    partial void OnSaleInvoice_DateChanging(System.DateTime value);
    partial void OnSaleInvoice_DateChanged();
    partial void OnSaleInvoice_NoteChanging(string value);
    partial void OnSaleInvoice_NoteChanged();
    partial void OnAccount_IDChanging(int value);
    partial void OnAccount_IDChanged();
    partial void OnCustomer_IDChanging(int value);
    partial void OnCustomer_IDChanged();
    #endregion
		
		public SaleInvoice()
		{
			this._SaleDetails = new EntitySet<SaleDetail>(new Action<SaleDetail>(this.attach_SaleDetails), new Action<SaleDetail>(this.detach_SaleDetails));
			this._Account = default(EntityRef<Account>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleInvoice_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SaleInvoice_ID
		{
			get
			{
				return this._SaleInvoice_ID;
			}
			set
			{
				if ((this._SaleInvoice_ID != value))
				{
					this.OnSaleInvoice_IDChanging(value);
					this.SendPropertyChanging();
					this._SaleInvoice_ID = value;
					this.SendPropertyChanged("SaleInvoice_ID");
					this.OnSaleInvoice_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleInvoice_Date", DbType="SmallDateTime NOT NULL")]
		public System.DateTime SaleInvoice_Date
		{
			get
			{
				return this._SaleInvoice_Date;
			}
			set
			{
				if ((this._SaleInvoice_Date != value))
				{
					this.OnSaleInvoice_DateChanging(value);
					this.SendPropertyChanging();
					this._SaleInvoice_Date = value;
					this.SendPropertyChanged("SaleInvoice_Date");
					this.OnSaleInvoice_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaleInvoice_Note", DbType="NVarChar(500)")]
		public string SaleInvoice_Note
		{
			get
			{
				return this._SaleInvoice_Note;
			}
			set
			{
				if ((this._SaleInvoice_Note != value))
				{
					this.OnSaleInvoice_NoteChanging(value);
					this.SendPropertyChanging();
					this._SaleInvoice_Note = value;
					this.SendPropertyChanged("SaleInvoice_Note");
					this.OnSaleInvoice_NoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_ID", DbType="Int NOT NULL")]
		public int Account_ID
		{
			get
			{
				return this._Account_ID;
			}
			set
			{
				if ((this._Account_ID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccount_IDChanging(value);
					this.SendPropertyChanging();
					this._Account_ID = value;
					this.SendPropertyChanged("Account_ID");
					this.OnAccount_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_ID", DbType="Int NOT NULL")]
		public int Customer_ID
		{
			get
			{
				return this._Customer_ID;
			}
			set
			{
				if ((this._Customer_ID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_ID = value;
					this.SendPropertyChanged("Customer_ID");
					this.OnCustomer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SaleInvoice_SaleDetail", Storage="_SaleDetails", ThisKey="SaleInvoice_ID", OtherKey="SaleInvoice_ID")]
		public EntitySet<SaleDetail> SaleDetails
		{
			get
			{
				return this._SaleDetails;
			}
			set
			{
				this._SaleDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_SaleInvoice", Storage="_Account", ThisKey="Account_ID", OtherKey="Account_ID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.SaleInvoices.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.SaleInvoices.Add(this);
						this._Account_ID = value.Account_ID;
					}
					else
					{
						this._Account_ID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_SaleInvoice", Storage="_Customer", ThisKey="Customer_ID", OtherKey="Customer_ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.SaleInvoices.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.SaleInvoices.Add(this);
						this._Customer_ID = value.Customer_ID;
					}
					else
					{
						this._Customer_ID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SaleDetails(SaleDetail entity)
		{
			this.SendPropertyChanging();
			entity.SaleInvoice = this;
		}
		
		private void detach_SaleDetails(SaleDetail entity)
		{
			this.SendPropertyChanging();
			entity.SaleInvoice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Supplier")]
	public partial class Supplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Supplier_ID;
		
		private string _Supplier_Name;
		
		private string _Supplier_Email;
		
		private string _Supplier_Phone;
		
		private string _Supplier_Address;
		
		private string _Supplier_Fax;
		
		private string _Supplier_Note;
		
		private EntitySet<PurchaseInvoice> _PurchaseInvoices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplier_IDChanging(int value);
    partial void OnSupplier_IDChanged();
    partial void OnSupplier_NameChanging(string value);
    partial void OnSupplier_NameChanged();
    partial void OnSupplier_EmailChanging(string value);
    partial void OnSupplier_EmailChanged();
    partial void OnSupplier_PhoneChanging(string value);
    partial void OnSupplier_PhoneChanged();
    partial void OnSupplier_AddressChanging(string value);
    partial void OnSupplier_AddressChanged();
    partial void OnSupplier_FaxChanging(string value);
    partial void OnSupplier_FaxChanged();
    partial void OnSupplier_NoteChanging(string value);
    partial void OnSupplier_NoteChanged();
    #endregion
		
		public Supplier()
		{
			this._PurchaseInvoices = new EntitySet<PurchaseInvoice>(new Action<PurchaseInvoice>(this.attach_PurchaseInvoices), new Action<PurchaseInvoice>(this.detach_PurchaseInvoices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supplier_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Supplier_ID
		{
			get
			{
				return this._Supplier_ID;
			}
			set
			{
				if ((this._Supplier_ID != value))
				{
					this.OnSupplier_IDChanging(value);
					this.SendPropertyChanging();
					this._Supplier_ID = value;
					this.SendPropertyChanged("Supplier_ID");
					this.OnSupplier_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supplier_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Supplier_Name
		{
			get
			{
				return this._Supplier_Name;
			}
			set
			{
				if ((this._Supplier_Name != value))
				{
					this.OnSupplier_NameChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Name = value;
					this.SendPropertyChanged("Supplier_Name");
					this.OnSupplier_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supplier_Email", DbType="NVarChar(50)")]
		public string Supplier_Email
		{
			get
			{
				return this._Supplier_Email;
			}
			set
			{
				if ((this._Supplier_Email != value))
				{
					this.OnSupplier_EmailChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Email = value;
					this.SendPropertyChanged("Supplier_Email");
					this.OnSupplier_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supplier_Phone", DbType="NVarChar(50)")]
		public string Supplier_Phone
		{
			get
			{
				return this._Supplier_Phone;
			}
			set
			{
				if ((this._Supplier_Phone != value))
				{
					this.OnSupplier_PhoneChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Phone = value;
					this.SendPropertyChanged("Supplier_Phone");
					this.OnSupplier_PhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supplier_Address", DbType="NVarChar(500)")]
		public string Supplier_Address
		{
			get
			{
				return this._Supplier_Address;
			}
			set
			{
				if ((this._Supplier_Address != value))
				{
					this.OnSupplier_AddressChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Address = value;
					this.SendPropertyChanged("Supplier_Address");
					this.OnSupplier_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supplier_Fax", DbType="NVarChar(50)")]
		public string Supplier_Fax
		{
			get
			{
				return this._Supplier_Fax;
			}
			set
			{
				if ((this._Supplier_Fax != value))
				{
					this.OnSupplier_FaxChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Fax = value;
					this.SendPropertyChanged("Supplier_Fax");
					this.OnSupplier_FaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supplier_Note", DbType="NVarChar(500)")]
		public string Supplier_Note
		{
			get
			{
				return this._Supplier_Note;
			}
			set
			{
				if ((this._Supplier_Note != value))
				{
					this.OnSupplier_NoteChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Note = value;
					this.SendPropertyChanged("Supplier_Note");
					this.OnSupplier_NoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_PurchaseInvoice", Storage="_PurchaseInvoices", ThisKey="Supplier_ID", OtherKey="Supplier_ID")]
		public EntitySet<PurchaseInvoice> PurchaseInvoices
		{
			get
			{
				return this._PurchaseInvoices;
			}
			set
			{
				this._PurchaseInvoices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PurchaseInvoices(PurchaseInvoice entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_PurchaseInvoices(PurchaseInvoice entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
	}
}
#pragma warning restore 1591
