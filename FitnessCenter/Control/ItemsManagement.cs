using BussinessLogicLayer;
using DataAccessLayer;
using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace FitnessCenter
{
    public partial class ItemsManagement : Form
    {
        public int Id;
        public bool isAdd = true;
        public ItemsManagement()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource2.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource3.Fill();
        }

        private void SettingManagement_Load(object sender, EventArgs e)
        {
            FillDataUpdate();
            txtMa.ReadOnly = true;
        }
        private void Reset()
        {
            txtGhiChu.Text = "";
            txtGiaTien.Text = "";
            txtMa.Text = "";
            txtMoTa.Text = "";
            txtNoiSanXuat.Text = "";
            txtTenHang.Text = "";
            txtTrangThai.Text = "";
            peAnh.EditValue = "";
            lkeLoaiThe.EditValue = "";
        }

        private void btnLamMoi_Click(object sender, EventArgs e)
        {
            Reset();
            sqlDataSource2.Fill();
            sqlDataSource3.Fill();
        }
        private void FillDataUpdate()
        {
            if (Id != 0)
            {
                DataFitnessCenterDataContext db = new DataFitnessCenterDataContext();
                var items = db.Items.Where(i => i.Items_ID == Id).SingleOrDefault();
                if (items != null)
                {
                    txtTenHang.EditValue = items.Items_Name;
                    txtGiaTien.EditValue = items.Items_Price;
                    txtGhiChu.EditValue = items.Items_Note;
                    txtMa.EditValue = items.Items_ID;
                    txtMoTa.EditValue = items.Items_Details;
                    txtNoiSanXuat.EditValue = items.Items_Company;
                    txtTrangThai.EditValue = items.Items_Status;
                    peAnh.EditValue = items.Items_Images;
                    lkeLoaiThe.EditValue = items.Items_Type_ID;
                    txtMa.ReadOnly = true;
                }
            }
        }

        private void SaveUpdate()
        {
            try
            {

                if (string.IsNullOrEmpty(txtTenHang.Text))
                {
                    lbTrangThai.Text = "*Vui lòng nhập tên hàng";
                    txtTenHang.Focus();
                }
                else
                {
                    if (lkeLoaiThe.Text == "Chọn loại hàng")
                    {
                        lbTrangThai.Text = "*Vui lòng chọn loại hàng";
                        lkeLoaiThe.Focus();
                    }
                    else
                    {
                        if (txtGiaTien.Value == 0)
                        {
                            lbTrangThai.Text = "*Vui lòng nhập giá tiền";
                            txtGiaTien.Focus();
                        }
                        else
                        {
                            string name = txtTenHang.Text;
                            string image = txtAnh.Text;
                            int price = Convert.ToInt32(txtGiaTien.Value.ToString());
                            string group = lkeLoaiThe.GetColumnValue("Items_Type_ID").ToString();
                            int typeId = Convert.ToInt32(group);
                            string note = txtGhiChu.Text;
                            string company = txtNoiSanXuat.Text;
                            string detail = txtMoTa.Text;
                            string status = txtTrangThai.Text;
                            if (string.IsNullOrEmpty(txtAnh.Text))
                            {
                                BLL_Items.UpdateItemsNoImage(Id, name, detail, price, company, status, note, typeId);
                                Reset();
                                sqlDataSource2.Fill();
                                sqlDataSource3.Fill();
                                lbTrangThai.Text = "";
                            }
                            else
                            {

                                BLL_Items.UpdateItems(Id, name, image, detail, price, company, status, note, typeId);
                                Reset();
                                sqlDataSource2.Fill();
                                sqlDataSource3.Fill();
                                lbTrangThai.Text = "";
                            }
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                String info = ex.Message;
                MessageError error = new MessageError();
                error.message = info;
                error.ShowDialog();
            }
        }

        private void btnThem_Click(object sender, EventArgs e)
        {
            try
            {
                if (isAdd == false)
                {
                    SaveUpdate();
                }
                else
                {
                    if (string.IsNullOrEmpty(txtTenHang.Text))
                    {
                        lbTrangThai.Text = "*Vui lòng nhập tên hàng";
                        txtTenHang.Focus();
                    }
                    else
                    {
                        if (lkeLoaiThe.Text == "Chọn loại hàng")
                        {
                            lbTrangThai.Text = "*Vui lòng chọn loại hàng";
                            lkeLoaiThe.Focus();
                        }
                        else
                        {
                            if (txtGiaTien.Value == 0)
                            {
                                lbTrangThai.Text = "*Vui lòng nhập giá tiền";
                                txtGiaTien.Focus();
                            }
                            else
                            {
                                string name = txtTenHang.Text;
                                string image = txtAnh.Text;
                                int price = Convert.ToInt32(txtGiaTien.Value.ToString());
                                string group = lkeLoaiThe.GetColumnValue("Items_Type_ID").ToString();
                                int typeId = Convert.ToInt32(group);
                                string note = txtGhiChu.Text;
                                string company = txtNoiSanXuat.Text;
                                string detail = txtMoTa.Text;
                                string status = txtTrangThai.Text;
                                if (string.IsNullOrEmpty(txtAnh.Text))
                                {
                                    BLL_Items.InsertItemsNoImage(name, detail, price, company, status, note, typeId);
                                    Reset();
                                    sqlDataSource2.Fill();
                                    sqlDataSource3.Fill();
                                    lbTrangThai.Text = "";
                                }
                                else
                                {

                                    BLL_Items.InsertItems(name, image, detail, price, company, status, note, typeId);
                                    Reset();
                                    sqlDataSource2.Fill();
                                    sqlDataSource3.Fill();
                                    lbTrangThai.Text = "";
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                String info = ex.Message;
                MessageError error = new MessageError();
                error.message = info;
                error.ShowDialog();
            }
        }

        private void csmCapNhat_Click(object sender, EventArgs e)
        {
            int rowIndex = gvDanhMuc.FocusedRowHandle;
            string colID = "Items_ID";
            object value = gvDanhMuc.GetRowCellValue(rowIndex, colID);
            if (value != null)
            {
                Id = (int)value;
                isAdd = false;
                FillDataUpdate();
                sqlDataSource2.Fill();
            }
            else
            {
                XtraMessageBox.Show("Bạn chưa chọn đối tượng để cập nhật", "Fitness Center", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void csmXoa_Click(object sender, EventArgs e)
        {
            try
            {
                if (XtraMessageBox.Show("Bạn có muốn xóa không?", "Fitness Center", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    int rowIndex = gvDanhMuc.FocusedRowHandle;
                    string colID = "Items_ID";
                    object value = gvDanhMuc.GetRowCellValue(rowIndex, colID);
                    if (value != null)
                    {
                        DataFitnessCenterDataContext dc = new DataFitnessCenterDataContext();
                        var ing = dc.Items.Where(s => s.Items_ID == (int)value).SingleOrDefault();
                        if (ing != null)
                        {
                            dc.Items.DeleteOnSubmit(ing);
                            dc.SubmitChanges();
                            sqlDataSource2.Fill();
                        }
                    }
                    else
                    {
                        XtraMessageBox.Show("Bạn chưa chọn đối tượng cần xóa", "Fitness Center", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
            }
            catch (Exception)
            {

                XtraMessageBox.Show("Không được phép xóa đối tượng này, đối tượng đã được thêm ở một danh mục khác", "Fitness Center", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void peAnh_Click(object sender, EventArgs e)
        {
            try
            {   
                OpenFileDialog openFileDialog = new OpenFileDialog();
                openFileDialog.Filter = ("Image Files |*.png; *.bmp; *.jpg;*.jpeg; *.gif;");
                openFileDialog.FilterIndex = 4;
                openFileDialog.RestoreDirectory = true;
                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    txtAnh.Text = openFileDialog.FileName;
                    peAnh.Image = Image.FromFile(openFileDialog.FileName);
                }
            }
            catch (Exception)
            {
                lbTrangThai.Text = "*Không thể tải được ảnh";
            }
        }

        private void csmXoaDungCu_Click(object sender, EventArgs e)
        {
            try
            {
                if (XtraMessageBox.Show("Bạn có muốn xóa không?", "Fitness Center", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    int rowIndex = gvDanhMucHang.FocusedRowHandle;
                    string colID = "Items_ID";
                    object value = gvDanhMucHang.GetRowCellValue(rowIndex, colID);
                    if (value != null)
                    {
                        DataFitnessCenterDataContext dc = new DataFitnessCenterDataContext();
                        var ing = dc.Items.Where(s => s.Items_ID == (int)value).SingleOrDefault();
                        if (ing != null)
                        {
                            dc.Items.DeleteOnSubmit(ing);
                            dc.SubmitChanges();
                            sqlDataSource3.Fill();
                        }
                    }
                    else
                    {
                        XtraMessageBox.Show("Bạn chưa chọn đối tượng cần xóa", "Fitness Center", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
            }
            catch (Exception)
            {

                XtraMessageBox.Show("Không được phép xóa đối tượng này, đối tượng đã được thêm ở một danh mục khác", "Fitness Center", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void csmCapNhatDungCu_Click(object sender, EventArgs e)
        {
            int rowIndex = gvDanhMucHang.FocusedRowHandle;
            string colID = "Items_ID";
            object value = gvDanhMucHang.GetRowCellValue(rowIndex, colID);
            if (value != null)
            {
                Id = (int)value;
                isAdd = false;
                FillDataUpdate();
                sqlDataSource3.Fill();
            }
            else
            {
                XtraMessageBox.Show("Bạn chưa chọn đối tượng để cập nhật", "Fitness Center", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }
    }

}
